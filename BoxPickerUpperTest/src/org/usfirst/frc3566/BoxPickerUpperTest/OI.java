// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3566.BoxPickerUpperTest;

import org.usfirst.frc3566.BoxPickerUpperTest.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import org.usfirst.frc3566.BoxPickerUpperTest.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

 
    // BEGIN AUTOGENERATED CODE, OURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joystick1;
    public boolean rightForward = false;
    public boolean leftForward = false;
    public boolean leftMotorOn = false;
    public boolean rightMotorOn = false;
    
    
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick1 = new Joystick(0);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("RunWithJoystick", new RunWithJoystick());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }
    
    public double getStick1Value()
    {
    	return joystick1.getRawAxis(1);
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
    public void pressedLBButton()
    {
    	
    	
    	if(joystick1.getRawButtonPressed(5)) {  //This is left turn on motor
    		if(leftMotorOn ) {
    			leftMotorOn = false;
    			//System.out.println("LeftMotorOn is " + leftMotorOn);
    		}else {
    			leftMotorOn = true;
    			//System.out.println("LeftMotorOn is " + leftMotorOn);
    		}
    	}
    	
    	//System.out.println("LeftMotorOn is " + leftMotorOn);
    	
    }
    
    
    public void pressedRBButton()
    {
    	
    	
    	if(joystick1.getRawButtonPressed(6)) {  //This is right turn on motor
    		if(rightMotorOn ) {
    			rightMotorOn = false;
    			System.out.println("rightMotorOn is " + rightMotorOn);
    		}else {
    			rightMotorOn = true;
    			System.out.println("rightMotorOn is " + rightMotorOn);
    		}
    	}
    	
    	
    	
    }
    
   
    
    
    public void pressedXLeftButton()
    {
    	
    	if(joystick1.getRawButtonPressed(3)) {  //This is x button for left direction
    		if(leftForward ) {
    			leftForward = false;
    			System.out.println("We should be moving leftMotor Backwards " + leftForward);
    		}else {
    			leftForward = true;
    			System.out.println("We should be moving leftMotor Forwards " + leftForward);
    		}
    	}
    
    }
    public void pressedBRightButton()
    {

    	
    	
   
    	
    	if( joystick1.getRawButtonPressed(2) ) {  //This is b button for right direction
    		if(rightForward ) {
    			rightForward = false;
    			System.out.println("We should be moving rightMotor Backwards " + rightForward);
    		}else {
    			rightForward = true;
    			System.out.println("We should be moving rightForward Forwards " + rightForward);
    		}
    	}
    	
    }
    
    public boolean getRightForward() {
    	return rightForward;
    }
    
    public boolean getLeftForward() {
    	return leftForward;
    }
    
    public boolean getRightMotorOn() {
    	return rightMotorOn;
    }
    
    public boolean getLeftMotorOn() {
    	return leftMotorOn;
    }
}

