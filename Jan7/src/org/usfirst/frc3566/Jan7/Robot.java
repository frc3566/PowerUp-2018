// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3566.Jan7;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3566.Jan7.commands.*;
import org.usfirst.frc3566.Jan7.subsystems.*;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();
   // UsbCamera cam1;
    Encoder encoder1;
    Ultrasonic sonar;

    public static OI oi;
    public static DriveTrain driveTrain;
    public static Variables var;


    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        var = new Variables();
        var.setUpRoutePoints(); //important: this should be before OI
      
        driveTrain = new DriveTrain();
        
/*
        cam1 = CameraServer.getInstance().startAutomaticCapture(0);
        cam1.setResolution(640, 320);
   
        
        encoder1 = new Encoder(0,1,false,Encoder.EncodingType.k4X);
        encoder1.setDistancePerPulse(-1.065);
        */
         
        oi = new OI();
        
        
        sonar = new Ultrasonic (0, 1);
        sonar.setAutomaticMode(true);
        
        
        // Add commands to Autonomous Sendable Chooser

        chooser.addDefault("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("Auto mode", chooser);
        
      
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        var.SendValuesToDashboard();
        RobotMap.pigeon.setYaw(0, 1000);
        
        
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
    	System.out.println("teleopPeriodic printing out");
        Scheduler.getInstance().run();
        SmartDashboard.putNumber("RearRight Current", RobotMap.RearRight.getOutputCurrent());
        var.updateValues();
        oi.updateCommands();
        updatePigeonValues();
        updateSonarValues();
        
        SmartDashboard.putNumber("EncoderDistance", encoder1.getDistance());
        
    }
    
    public double updatePigeonValues() {
    	double[] ypr = new double[3];
    	RobotMap.pigeon.getYawPitchRoll(ypr);
    	//YAW: Continuous angle (Degrees) of the robot's heading. A complete turn is 360. 
    	SmartDashboard.putNumber("Yaw", ypr[0]*-1); //IMPORTANT: DO NOT CHANGE THIS. DANGER OF MESSING EVEYTHING UP.
    	return ypr[0]*-1; //made so that gyro's positive is to the right. Originally, it's to the left. 
    }
    
    public double updateSonarValues() {
    	double value = sonar.getRangeInches();
    	SmartDashboard.putNumber("Sonar", value);
    	return value;
    }
}
