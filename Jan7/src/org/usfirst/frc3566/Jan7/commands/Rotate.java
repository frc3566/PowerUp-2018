// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3566.Jan7.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3566.Jan7.Robot;
import org.usfirst.frc3566.Jan7.RobotMap;

/**
 *
 */
public class Rotate extends Command {

	private double spd;
	private boolean dir;
	private double startDegree, endDegree, deltaDegree, allowedError;

    public Rotate(double delta, double speed, boolean direction) {
    	//direction==true: turn to right
    	//for deltaDegree: left+ right-
    	deltaDegree = delta;
    	deltaDegree *= (direction? -1:1);

    	spd = speed;
    	dir = direction;
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	
    	startDegree = SmartDashboard.getNumber("Yaw", 0);
    	endDegree = startDegree + deltaDegree;
    	allowedError = 2;
    	    	
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	Robot.driveTrain.rotate(spd, dir);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	double value = SmartDashboard.getNumber("Yaw", -30000);
    	if( endDegree-allowedError <= value
    			&& value <= endDegree+allowedError) { //if actual yaw is in the range of allowed Error
    		return true;
    	}else {
    		return false;
    	}
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.driveTrain.stopDrive();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
