// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3566.CameraServoTest;



import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;
import org.usfirst.frc3566.CameraServoTest.commands.AutonomousCommand;
import org.usfirst.frc3566.CameraServoTest.subsystems.CameraSubsystem;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CameraSubsystem cameraSubSys;
    
    //our team works this way
    //public static UsbCamera camMain;
    //public static VisionThread visionThread;
    //public static CvSink cvSink;
    //public static CvSource outputStream;
    //public static Mat source ;
    //public static Mat output ;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        
       // camMain = CameraServer.getInstance().startAutomaticCapture(0);
       // camMain.setResolution(480,  360);
        //camMain.setFPS(20);
        
        cameraSubSys = new CameraSubsystem();
        
        
        new Thread(() -> {
            UsbCamera camMain = CameraServer.getInstance().startAutomaticCapture();
            camMain.setResolution(640, 480);
            camMain.setFPS(5);
            
             CvSink cvSink = CameraServer.getInstance().getVideo();
             //CvSource outputStream = CameraServer.getInstance().putVideo("Blur", 640, 480);
             CvSource outputStream = CameraServer.getInstance().putVideo("Blur", 640, 480);
            
             Mat source = new Mat();
             Mat output = new Mat();
            
            while(!Thread.interrupted()) {
                cvSink.grabFrame(source);
                
                /*
                 * blur(src,src,Size(3,3));
					cvtColor(src,tmp,CV_BGR2GRAY);
					Canny( src, thr, 10, 100, 3 );
                 */
                
                //Imgproc.blur(source,source,new Size(3,3));
				//Imgproc.cvtColor(source,output,Imgproc.COLOR_BGR2GRAY);
				//Imgproc.Canny( source, output, 10, 100.0 );
                
                //Imgproc.cvtColor(source, output, Imgproc.COLOR_BGR2GRAY );
                //Imgproc.rectangle(source, new Point(0,0), new Point(200,200), new Scalar(1.0), 5);
                //Imgproc.blur(source, output, null);
                Imgproc.Canny(source, output, 10, 100);
                outputStream.putFrame(output);
            }
        }).start();
        
        
        
        
//        camMain = CameraServer.getInstance().startAutomaticCapture(0);
//        camMain.setResolution(480, 360);
//        camMain.setFPS(20);
//        
//        visionThread = new VisionThread(camMain, new MyVisionPipeline(), pipeline -> {
//            if (!pipeline.filterContoursOutput().isEmpty()) {
//                Rect r = Imgproc.boundingRect(pipeline.filterContoursOutput().get(0));
//                synchronized (imgLock) {
//                    centerX = r.x + (r.width / 2);
//                }
//            }
//        });
//        visionThread.start();
//            
//        drive = new RobotDrive(1, 2);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addDefault("Autonomous Command", new AutonomousCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
}
