// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3566.CameraServoTest.subsystems;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;
import org.usfirst.frc3566.CameraServoTest.Robot;
import org.usfirst.frc3566.CameraServoTest.RobotMap;
import org.usfirst.frc3566.CameraServoTest.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Servo;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class CameraSubsystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Servo servo1 = RobotMap.cameraServo1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    double currentPos = 0;
    //MyVisionThread visionThread;
    //UsbCamera camMain;

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new RunCameraOnJoyStick());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
        
//     	visionThread = new MyVisionThread(this); 
//     	visionThread.setDaemon(true);
//     	visionThread.start();
     	
     	/* (() -> {
     		// Get the UsbCamera from CameraServer
     		camMain = CameraServer.getInstance().startAutomaticCapture();
     		// Set the resolution
     		camMain.setResolution(640, 480);
     		camMain.setFPS(20);

     		// Get a CvSink. This will capture Mats from the camera
     		CvSink cvSink = CameraServer.getInstance().getVideo();
     		// Setup a CvSource. This will send images back to the Dashboard
     		CvSource outputStream = CameraServer.getInstance().putVideo("Rectangle", 640, 480);

     		// Mats are very memory expensive. Lets reuse this Mat.
     		Mat mat = new Mat();

     		// This cannot be 'true'. The program will never exit if it is. This
     		// lets the robot stop this thread when restarting robot code or
     		// deploying.
     		while (!Thread.interrupted()) {
     			//System.out.println("Hi from the thread");
     			// Tell the CvSink to grab a frame from the camera and put it
     			// in the source mat.  If there is an error notify the output.
     			if (cvSink.grabFrame(mat) == 0) {
     				// Send the output the error.
     				outputStream.notifyError(cvSink.getError());
     				// skip the rest of the current iteration
     				continue;
     			}
     			// Put a rectangle on the image
     			Imgproc.rectangle(mat, new Point(100, 100), new Point(400, 400),
     					new Scalar(255, 255, 255), 5);
     			// Give the output stream a new image to display
     			
     		    if(currentPos < 80) {
     		    	
     		    	Mat flippedMat = new Mat();
     		    	
     		    	Core.flip(mat, flippedMat, 0);
     		    	
     		    	outputStream.putFrame(flippedMat);
     		    } else {
     			
     		    	outputStream.putFrame(mat);
     		    }
     		}
     	});
     	visionThread.setDaemon(true);
     	visionThread.start();
     	  
    }
    */
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
   
    public synchronized void moveServo(double stickValue)
    {
    	System.out.println("The stick value is: " + stickValue);
    	if(stickValue == 0.0) {
    		
    		currentPos -= 1;
    		if( currentPos < 0) currentPos = 0;
    		
    	} else if(stickValue == 180.0) {
    		currentPos += 1;
    		if( currentPos > 180) currentPos = 180;
    	}
    	
    	System.out.println("The current angle is " + currentPos);
    	servo1.setAngle(currentPos);
    	
    	
    }
    
    public double getCurrentPosition() {
    	return currentPos;
    }

}

